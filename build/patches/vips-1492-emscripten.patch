From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Kleis Auke Wolthuizen <github@kleisauke.nl>
Date: Fri, 21 Feb 2020 14:00:00 +0100
Subject: [PATCH 1/2] Emscripten specific thread changes

- We need a exclusive thread pool to avoid any potential deadlocks.
- Remove background thread in vips_sink_screen.
- Start thread pool during vips_init (reverts commit 6946c3b).

Upstream-Status: Inappropriate [Emscripten specific]

diff --git a/libvips/include/vips/private.h b/libvips/include/vips/private.h
index 1111111..2222222 100644
--- a/libvips/include/vips/private.h
+++ b/libvips/include/vips/private.h
@@ -134,8 +134,6 @@ VipsBuffer *vips_buffer_unref_ref( VipsBuffer *buffer,
 VIPS_API
 void vips_buffer_print( VipsBuffer *buffer );
 
-void vips__render_shutdown( void );
-
 /* Sections of region.h that are private to VIPS.
  */
 
diff --git a/libvips/include/vips/thread.h b/libvips/include/vips/thread.h
index 1111111..2222222 100644
--- a/libvips/include/vips/thread.h
+++ b/libvips/include/vips/thread.h
@@ -51,13 +51,6 @@ void vips_g_mutex_free( GMutex * );
 VIPS_API
 void vips_g_cond_free( GCond * );
 
-/* ... and for GThread.
- */
-VIPS_API
-GThread *vips_g_thread_new( const char *, GThreadFunc, gpointer );
-VIPS_API
-void *vips_g_thread_join( GThread *thread );
-
 VIPS_API
 gboolean vips_thread_isworker( void );
 
diff --git a/libvips/iofuncs/init.c b/libvips/iofuncs/init.c
index 1111111..2222222 100644
--- a/libvips/iofuncs/init.c
+++ b/libvips/iofuncs/init.c
@@ -436,7 +436,6 @@ vips_init( const char *argv0 )
 	extern GType vips_system_get_type( void );
 	extern GType write_thread_state_get_type( void );
 	extern GType sink_memory_thread_state_get_type( void ); 
-	extern GType render_thread_state_get_type( void ); 
 	extern GType vips_source_get_type( void ); 
 	extern GType vips_source_custom_get_type( void ); 
 	extern GType vips_target_get_type( void ); 
@@ -555,7 +554,6 @@ vips_init( const char *argv0 )
 	(void) vips_region_get_type();
 	(void) write_thread_state_get_type();
 	(void) sink_memory_thread_state_get_type(); 
-	(void) render_thread_state_get_type(); 
 	(void) vips_source_get_type(); 
 	(void) vips_source_custom_get_type(); 
 	(void) vips_target_get_type(); 
@@ -762,7 +760,6 @@ vips_shutdown( void )
 		vips__thread_gate_stop( "init: main" ); 
 }
 
-	vips__render_shutdown();
 	vips_thread_shutdown();
 	vips__thread_profile_stop();
 	vips__threadpool_shutdown();
diff --git a/libvips/iofuncs/sinkscreen.c b/libvips/iofuncs/sinkscreen.c
index 1111111..2222222 100644
--- a/libvips/iofuncs/sinkscreen.c
+++ b/libvips/iofuncs/sinkscreen.c
@@ -90,11 +90,6 @@ typedef struct {
 	 */
 	gboolean painted;
 
-	/* The tile is on the dirty list. This saves us having to search the
-	 * dirty list all the time.
-	 */
-	gboolean dirty;
-
 	/* Time of last use, for LRU flush 
 	 */
 	int ticks;
@@ -123,8 +118,6 @@ typedef struct _Render {
 	int tile_height;
 	int max_tiles;		/* Maximum number of tiles */
 	int priority;		/* Larger numbers done sooner */
-	VipsSinkNotify notify;	/* Tell caller about paints here */
-	void *a;
 
 	/* Lock here before reading or modifying the tile structure. 
 	 */
@@ -136,80 +129,11 @@ typedef struct _Render {
 	int ntiles;		/* Number of tiles */
 	int ticks;		/* Inc. on each access ... used for LRU */
 
-	/* List of dirty tiles. Most recent at the front.
-	 */
-	GSList *dirty;		
-
-	/* Hash of tiles with positions. Tiles can be dirty or painted.
+	/* Hash of tiles with positions. Tiles can be painted.
 	 */
 	GHashTable *tiles;
-
-	/* A shutdown flag. If ->out or ->mask close, we must no longer do
-	 * anything to them until we shut down too.
-	 */
-	gboolean shutdown;
 } Render;
 
-/* Our per-thread state.
- */
-typedef struct _RenderThreadState {
-	VipsThreadState parent_object;
-
-	/* The tile that should be calculated.
-	 */
-	Tile *tile;
-} RenderThreadState;
-
-typedef struct _RenderThreadStateClass {
-	VipsThreadStateClass parent_class;
-
-} RenderThreadStateClass;
-
-G_DEFINE_TYPE( RenderThreadState, render_thread_state, VIPS_TYPE_THREAD_STATE );
-
-/* The BG thread which sits waiting to do some calculations, and the semaphore
- * it waits on holding the number of renders with dirty tiles. 
- */
-static GThread *render_thread = NULL;
-
-/* Set this to ask the render thread to quit.
- */
-static gboolean render_kill = FALSE;
-
-/* All the renders with dirty tiles, and a semaphore that the bg render thread
- * waits on.
- */
-static GMutex *render_dirty_lock = NULL;
-static GSList *render_dirty_all = NULL;
-static VipsSemaphore n_render_dirty_sem; 
-
-/* Set this to make the bg thread stop and reschedule.
- */
-static gboolean render_reschedule = FALSE;
-
-static void
-render_thread_state_class_init( RenderThreadStateClass *class )
-{
-	VipsObjectClass *object_class = VIPS_OBJECT_CLASS( class );
-
-	object_class->nickname = "renderthreadstate";
-	object_class->description = _( "per-thread state for render" );
-}
-
-static void
-render_thread_state_init( RenderThreadState *state )
-{
-	state->tile = NULL;
-}
-
-static VipsThreadState *
-render_thread_state_new( VipsImage *im, void *a )
-{
-	return( VIPS_THREAD_STATE( vips_object_new( 
-		render_thread_state_get_type(), 
-		vips_thread_state_set, im, a ) ) );
-}
-
 static void *
 tile_free( Tile *tile, void *a, void *b )
 {
@@ -232,17 +156,6 @@ render_free( Render *render )
 	g_assert( render->ref_count == 0 );
 #endif
 
-	g_mutex_lock( render_dirty_lock );
-	if( g_slist_find( render_dirty_all, render ) ) {
-		render_dirty_all = g_slist_remove( render_dirty_all, render );
-
-		/* We don't need to adjust the semaphore: if it's too high, 
-		 * the render thread will just loop and decrement next time 
-		 * render_dirty_all is NULL.
-		 */
-	}
-	g_mutex_unlock( render_dirty_lock );
-
 #if !GLIB_CHECK_VERSION( 2, 58, 0 )
 	vips_g_mutex_free( render->ref_count_lock );
 #endif
@@ -251,7 +164,6 @@ render_free( Render *render )
 	vips_slist_map2( render->all, (VipsSListMap2Fn) tile_free, NULL, NULL );
 	VIPS_FREEF( g_slist_free, render->all );
 	render->ntiles = 0;
-	VIPS_FREEF( g_slist_free, render->dirty );
 	VIPS_FREEF( g_hash_table_destroy, render->tiles );
 
 	VIPS_UNREF( render->in ); 
@@ -305,197 +217,6 @@ render_unref( Render *render )
 	return( 0 );
 }
 
-/* Get the next tile to paint off the dirty list.
- */
-static Tile *
-render_tile_dirty_get( Render *render )
-{
-	Tile *tile;
-
-	if( !render->dirty )
-		tile = NULL;
-	else {
-		tile = (Tile *) render->dirty->data;
-		g_assert( tile->dirty );
-		render->dirty = g_slist_remove( render->dirty, tile );
-		tile->dirty = FALSE;
-	}
-
-	return( tile );
-}
-
-/* Pick a dirty tile to reuse. We could potentially get the tile that
- * render_work() is working on in the background :-( but I don't think we'll
- * get a crash, just a mis-paint. It should be vanishingly impossible anyway.
- */
-static Tile *
-render_tile_dirty_reuse( Render *render )
-{
-	Tile *tile;
-
-	if( !render->dirty )
-		tile = NULL;
-	else {
-		tile = (Tile *) g_slist_last( render->dirty )->data;
-		render->dirty = g_slist_remove( render->dirty, tile );
-		g_assert( tile->dirty );
-		tile->dirty = FALSE;
-
-		VIPS_DEBUG_MSG( "render_tile_get_dirty_reuse: "
-			"reusing dirty %p\n", tile );
-	}
-
-	return( tile );
-}
-
-/* Add a tile to the dirty list.
- */
-static void
-tile_dirty_set( Tile *tile )
-{
-	Render *render = tile->render;
-
-	if( !tile->dirty ) {
-		g_assert( !g_slist_find( render->dirty, tile ) );
-		render->dirty = g_slist_prepend( render->dirty, tile );
-		tile->dirty = TRUE;
-		tile->painted = FALSE;
-	}
-	else
-		g_assert( g_slist_find( render->dirty, tile ) );
-}
-
-/* Bump a tile to the front of the dirty list, if it's there.
- */
-static void
-tile_dirty_bump( Tile *tile )
-{
-	Render *render = tile->render;
-
-	if( tile->dirty ) {
-		g_assert( g_slist_find( render->dirty, tile ) );
-
-		render->dirty = g_slist_remove( render->dirty, tile );
-		render->dirty = g_slist_prepend( render->dirty, tile );
-	}
-	else
-		g_assert( !g_slist_find( render->dirty, tile ) );
-}
-
-static int 
-render_allocate( VipsThreadState *state, void *a, gboolean *stop )
-{
-	Render *render = (Render *) a;
-	RenderThreadState *rstate = (RenderThreadState *) state;
-	Tile *tile;
-
-	g_mutex_lock( render->lock );
-
-	if( render_reschedule || 
-		!(tile = render_tile_dirty_get( render )) ) {
-		VIPS_DEBUG_MSG_GREEN( "render_allocate: stopping\n" );
-		*stop = TRUE;
-		rstate->tile = NULL;
-	}
-	else 
-		rstate->tile = tile;
-
-	g_mutex_unlock( render->lock );
-
-	return( 0 );
-}
-
-static int 
-render_work( VipsThreadState *state, void *a )
-{
-	Render *render = (Render *) a;
-	RenderThreadState *rstate = (RenderThreadState *) state;
-	Tile *tile = rstate->tile;
-
-	g_assert( tile );
-
-	VIPS_DEBUG_MSG( "calculating tile %p %dx%d\n", 
-		tile, tile->area.left, tile->area.top );
-
-	if( vips_region_prepare_to( state->reg, tile->region, 
-		&tile->area, tile->area.left, tile->area.top ) ) {
-		VIPS_DEBUG_MSG_RED( "render_work: "
-			"vips_region_prepare_to() failed: %s\n",
-			vips_error_buffer() ); 
-		return( -1 );
-	}
-	tile->painted = TRUE;
-
-	if( !render->shutdown &&
-		render->notify ) 
-		render->notify( render->out, &tile->area, render->a );
-
-	return( 0 );
-}
-
-static void render_dirty_put( Render *render );
-
-/* Called from vips_shutdown().
- */
-void
-vips__render_shutdown( void )
-{
-	/* We may come here without having inited.
-	 */
-	if( render_dirty_lock ) {
-		g_mutex_lock( render_dirty_lock );
-
-		if( render_thread ) { 
-			GThread *thread;
-
-			thread = render_thread;
-			render_reschedule = TRUE;
-			render_kill = TRUE;
-
-			g_mutex_unlock( render_dirty_lock );
-
-			vips_semaphore_up( &n_render_dirty_sem ); 
-
-			(void) vips_g_thread_join( thread );
-		}
-		else
-			g_mutex_unlock( render_dirty_lock );
-
-		VIPS_FREEF( vips_g_mutex_free, render_dirty_lock );
-		vips_semaphore_destroy( &n_render_dirty_sem );
-	}
-}
-
-static int       
-render_dirty_sort( Render *a, Render *b, void *user_data )
-{
-	return( b->priority - a->priority );
-}
-
-/* Add to the jobs list, if it has work to be done.
- */
-static void
-render_dirty_put( Render *render )
-{
-	g_mutex_lock( render_dirty_lock );
-
-	if( render->dirty ) {
-		if( !g_slist_find( render_dirty_all, render ) ) {
-			render_dirty_all = g_slist_prepend( render_dirty_all, 
-				render );
-			render_dirty_all = g_slist_sort( render_dirty_all,
-				(GCompareFunc) render_dirty_sort );
-
-			/* Tell the bg render thread we have one more dirty
-			 * render on there.
-			 */
-			vips_semaphore_up( &n_render_dirty_sem ); 
-		}
-	}
-
-	g_mutex_unlock( render_dirty_lock );
-}
-
 static guint
 tile_hash( gconstpointer key )
 {
@@ -522,28 +243,14 @@ render_close_cb( VipsImage *image, Render *render )
 {
 	VIPS_DEBUG_MSG_AMBER( "render_close_cb\n" );
 
-	/* The output image or mask are closing. This render will stick 
-	 * around for a while, since threads can still be running, but it 
-	 * must no longer reference ->out or ->mask (for example, invalidating
-	 * them).
-	 */
-	render->shutdown = TRUE;
-
 	render_unref( render );
-
-	/* If this render is being worked on, we want to jog the bg thread, 
-	 * make it drop it's ref and think again.
-	 */
-	VIPS_DEBUG_MSG_GREEN( "render_close_cb: reschedule\n" );
-	render_reschedule = TRUE;
 }
 
 static Render *
 render_new( VipsImage *in, VipsImage *out, VipsImage *mask, 
 	int tile_width, int tile_height, 
 	int max_tiles, 
-	int priority,
-	VipsSinkNotify notify, void *a )
+	int priority )
 {
 	Render *render;
 
@@ -571,8 +278,6 @@ render_new( VipsImage *in, VipsImage *out, VipsImage *mask,
 	render->tile_height = tile_height;
 	render->max_tiles = max_tiles;
 	render->priority = priority;
-	render->notify = notify;
-	render->a = a;
 
 	render->lock = vips_g_mutex_new();
 
@@ -580,11 +285,7 @@ render_new( VipsImage *in, VipsImage *out, VipsImage *mask,
 	render->ntiles = 0;
 	render->ticks = 0;
 
-	render->tiles = g_hash_table_new( tile_hash, tile_equal ); 
-
-	render->dirty = NULL;
-
-	render->shutdown = FALSE;
+	render->tiles = g_hash_table_new( tile_hash, tile_equal );
 
 	/* Both out and mask must close before we can free the render.
 	 */
@@ -628,7 +329,6 @@ tile_new( Render *render )
 	tile->area.height = render->tile_height;
 	tile->region = NULL;
 	tile->painted = FALSE;
-	tile->dirty = FALSE;
 	tile->ticks = render->ticks;
 
 	if( !(tile->region = vips_region_new( render->in )) ) {
@@ -690,7 +390,7 @@ render_tile_move( Tile *tile, VipsRect *area )
 	}
 }
 
-/* We've looked at a tile ... bump to end of LRU and front of dirty.
+/* We've looked at a tile ... bump to end of LRU.
  */
 static void
 tile_touch( Tile *tile )
@@ -699,7 +399,6 @@ tile_touch( Tile *tile )
 
 	tile->ticks = render->ticks;
 	render->ticks += 1;
-	tile_dirty_bump( tile );
 }
 
 /* Queue a tile for calculation. 
@@ -709,43 +408,32 @@ tile_queue( Tile *tile, VipsRegion *reg )
 {
 	Render *render = tile->render;
 
-	VIPS_DEBUG_MSG( "tile_queue: adding tile %p %dx%d to dirty\n",
+	VIPS_DEBUG_MSG( "tile_queue: queue tile %p %dx%d for calculation\n",
 		tile, tile->area.left, tile->area.top );
 
 	tile->painted = FALSE;
 	tile_touch( tile );
 
-	if( render->notify ) {
-		/* Add to the list of renders with dirty tiles. The bg 
-		 * thread will pick it up and paint it. It can be already on
-		 * the dirty list.
-		 */
-		tile_dirty_set( tile ); 
-		render_dirty_put( render );
-	}
-	else {
-		/* no notify ... paint the tile ourselves 
-		 * sychronously. No need to notify the client since they'll 
-		 * never see black tiles.
-		 */
-		VIPS_DEBUG_MSG( "tile_queue: "
-			"painting tile %p %dx%d synchronously\n",
-			tile, tile->area.left, tile->area.top );
+	/* Paint the tile synchronously. No need to notify the 
+	 * client since they'll never see black tiles.
+	 */
+	VIPS_DEBUG_MSG( "tile_queue: "
+		"painting tile %p %dx%d synchronously\n",
+		tile, tile->area.left, tile->area.top );
 
-		/* While we're computing, let other threads use the cache.
-		 * This tile won't get pulled out from under us since it's not
-		 * marked as "painted", and it's not on the dirty list.
-		 */
-		g_mutex_unlock( render->lock );
+	/* While we're computing, let other threads use the cache.
+	 * This tile won't get pulled out from under us since it's not
+	 * marked as "painted".
+	 */
+	g_mutex_unlock( render->lock );
 
-		if( vips_region_prepare_to( reg, tile->region, 
-			&tile->area, tile->area.left, tile->area.top ) ) 
-			VIPS_DEBUG_MSG_RED( "tile_queue: prepare failed\n" ); 
+	if( vips_region_prepare_to( reg, tile->region, 
+		&tile->area, tile->area.left, tile->area.top ) ) 
+		VIPS_DEBUG_MSG_RED( "tile_queue: prepare failed\n" ); 
 
-		g_mutex_lock( render->lock );
+	g_mutex_lock( render->lock );
 
-		tile->painted = TRUE;
-	}
+	tile->painted = TRUE;
 }
 
 static void 
@@ -808,11 +496,9 @@ render_tile_request( Render *render, VipsRegion *reg, VipsRect *area )
 		tile_queue( tile, reg );
 	}
 	else {
-		/* Need to reuse a tile. Try for an old painted tile first, 
-		 * then if that fails, reuse a dirty tile. 
+		/* Need to reuse a tile. Try an old painted tile.
 		 */
-		if( !(tile = render_tile_get_painted( render )) &&
-			!(tile = render_tile_dirty_reuse( render )) ) {
+		if( !(tile = render_tile_get_painted( render )) ) {
 			VIPS_DEBUG_MSG( "render_tile_request: "
 				"no tiles to reuse\n" );
 			return( NULL );
@@ -967,101 +653,6 @@ mask_fill( VipsRegion *out, void *seq, void *a, void *b, gboolean *stop )
 	return( 0 );
 }
 
-/* Get the first render with dirty tiles. 
- */
-static Render *
-render_dirty_get( void )
-{
-	Render *render;
-
-	/* Wait for a render with dirty tiles.
-	 */
-	vips_semaphore_down( &n_render_dirty_sem ); 
-
-	g_mutex_lock( render_dirty_lock );
-
-	/* Just take the head of the jobs list ... we sort when we add. 
-	 */
-	render = NULL;
-	if( render_dirty_all ) {
-		render = (Render *) render_dirty_all->data;
-
-		/* Ref the render to make sure it can't die while we're
-		 * working on it.
-		 */
-		render_ref( render );
-
-		render_dirty_all = g_slist_remove( render_dirty_all, render );
-	}
-
-	g_mutex_unlock( render_dirty_lock );
-
-	return( render );
-}
-
-/* Loop for the background render manager thread.
- */
-static void *
-render_thread_main( void *client )
-{
-	Render *render;
-
-	while( !render_kill ) {
-		VIPS_DEBUG_MSG_GREEN( "render_thread_main: "
-			"threadpool start\n" );
-
-		render_reschedule = FALSE;
-
-		if( (render = render_dirty_get()) ) {
-			if( vips_threadpool_run( render->in,
-				render_thread_state_new,
-				render_allocate,
-				render_work,
-				NULL,
-				render ) )
-				VIPS_DEBUG_MSG_RED( "render_thread_main: "
-					"threadpool_run failed\n" );
-
-			VIPS_DEBUG_MSG_GREEN( "render_thread_main: "
-				"threadpool return\n" );
-
-			/* Add back to the jobs list, if we need to.
-			 */
-			render_dirty_put( render );
-
-			/* _get() does a ref to make sure we keep the render
-			 * alive during processing ... unref before we loop.
-			 * This can kill off the render.
-			 */
-			render_unref( render );
-		}
-	}
-
-	/* We are exiting, so render_thread must now be NULL.
-	 */
-	render_thread = NULL; 
-
-	return( NULL );
-}
-
-static void *
-vips__sink_screen_once( void *data )
-{
-	g_assert( !render_thread ); 
-	g_assert( !render_dirty_lock ); 
-
-	render_dirty_lock = vips_g_mutex_new();
-	vips_semaphore_init( &n_render_dirty_sem, 0, "n_render_dirty" );
-
-	/* Don't use vips__thread_execute() since this thread will only be
-	 * ended by vips_shutdown, and that isn't always called.
-	 */
-	render_thread = vips_g_thread_new( "sink_screen",
-		render_thread_main, NULL );
-
-	return( NULL );
-}
-
 /**
  * vips_sink_screen: (method)
  * @in: input image
@@ -1071,12 +662,9 @@ vips__sink_screen_once( void *data )
  * @tile_height: tile height
  * @max_tiles: maximum tiles to cache
  * @priority: rendering priority
- * @notify_fn: (scope call) (nullable): pixels are ready notification callback
- * @a: (closure notify_fn) (nullable): client data for callback
  *
  * This operation renders @in in the background, making pixels available on
- * @out as they are calculated. The @notify_fn callback is run every time a new
- * set of pixels are available. Calculated pixels are kept in a cache with
+ * @out as they are calculated. Calculated pixels are kept in a cache with
  * tiles sized @tile_width by @tile_height pixels and with at most @max_tiles 
  * tiles.
  * If @max_tiles is -1, the cache is of unlimited size (up to the maximum image
@@ -1094,18 +682,7 @@ vips__sink_screen_once( void *data )
  * whatever is
  * currently in cache for that #VipsRect (check @mask to see which parts of the
  * #VipsRect are valid). Any pixels in the #VipsRect which are not in 
- * cache are added
- * to a queue, and the @notify_fn callback will trigger when those pixels are
- * ready.
- *
- * The @notify_fn callback is run from one of the background threads. In the 
- * callback
- * you need to somehow send a message to the main thread that the pixels are
- * ready. In a glib-based application, this is easily done with g_idle_add().
- *
- * If @notify_fn is %NULL then vips_sink_screen() runs synchronously.
- * vips_region_prepare() on @out will always block until the pixels have been
- * calculated.
+ * cache are added to a queue.
  *
  * See also: vips_tilecache(), vips_region_prepare(), 
  * vips_sink_disc(), vips_sink().
@@ -1119,11 +696,10 @@ vips_sink_screen( VipsImage *in, VipsImage *out, VipsImage *mask,
 	int priority,
 	VipsSinkNotify notify_fn, void *a )
 {
-	static GOnce once = G_ONCE_INIT;
-
 	Render *render;
 
-	VIPS_ONCE( &once, vips__sink_screen_once, NULL );
+	(void) notify_fn;
+	(void) a;
 
 	if( tile_width <= 0 || tile_height <= 0 || 
 		max_tiles < -1 ) {
@@ -1148,7 +726,7 @@ vips_sink_screen( VipsImage *in, VipsImage *out, VipsImage *mask,
 	}
 
 	if( !(render = render_new( in, out, mask, 
-		tile_width, tile_height, max_tiles, priority, notify_fn, a )) )
+		tile_width, tile_height, max_tiles, priority )) )
 		return( -1 );
 
 	VIPS_DEBUG_MSG( "vips_sink_screen: max = %d, %p\n", max_tiles, render );
@@ -1178,15 +756,5 @@ vips__print_renders( void )
 	}
 #endif /*VIPS_DEBUG_AMBER*/
 
-	if( render_dirty_lock ) { 
-		g_mutex_lock( render_dirty_lock );
-
-		n_leaks += g_slist_length( render_dirty_all );
-		if( render_dirty_all ) 
-			printf( "dirty renders\n" );
-
-		g_mutex_unlock( render_dirty_lock );
-	}
-
 	return( n_leaks );
 }
diff --git a/libvips/iofuncs/threadpool.c b/libvips/iofuncs/threadpool.c
index 1111111..2222222 100644
--- a/libvips/iofuncs/threadpool.c
+++ b/libvips/iofuncs/threadpool.c
@@ -120,6 +120,11 @@ int vips__thinstrip_height = VIPS__THINSTRIP_HEIGHT;
  */
 int vips__concurrency = 0;
 
+/* The amount of background threads that may run additionally
+ * within the thread pool (see vips_sink_disc).
+ */
+const int vips__bg_threads = 3;
+
 /* Set this GPrivate to indicate that this thread is a worker inside
  * the vips threadpool.
  */
@@ -129,6 +134,11 @@ static GPrivate *is_worker_key = NULL;
  */
 static gboolean vips__stall = FALSE;
 
+/* Whether the thread pool owns all threads exclusive or shares
+ * them with other thread pools.
+ */
+static gboolean vips__exclusive = TRUE;
+
 /* The thread pool we'll use.
  */
 static GThreadPool *vips__pool = NULL;
@@ -182,77 +192,6 @@ vips_thread_isworker( void )
 	return( g_private_get( is_worker_key ) != NULL );
 }
 
-typedef struct {
-	const char *domain; 
-	GThreadFunc func; 
-	gpointer data;
-} VipsThreadInfo; 
-
-static void *
-vips_thread_run( gpointer data )
-{
-	VipsThreadInfo *info = (VipsThreadInfo *) data;
-
-	void *result;
-
-	/* Set this to something (anything) to tag this thread as a vips 
-	 * worker.
-	 */
-	g_private_set( is_worker_key, data );
-
-	if( vips__thread_profile ) 
-		vips__thread_profile_attach( info->domain );
-
-	result = info->func( info->data );
-
-	g_free( info ); 
-
-	vips_thread_shutdown();
-
-	return( result ); 
-}
-
-GThread *
-vips_g_thread_new( const char *domain, GThreadFunc func, gpointer data )
-{
-	GThread *thread;
-	VipsThreadInfo *info; 
-	GError *error = NULL;
-
-	info = g_new( VipsThreadInfo, 1 ); 
-	info->domain = domain;
-	info->func = func;
-	info->data = data;
-
-	thread = g_thread_try_new( domain, vips_thread_run, info, &error );
-
-	VIPS_DEBUG_MSG_RED( "vips_g_thread_new: g_thread_create( %s ) = %p\n",
-		domain, thread );
-
-	if( !thread ) {
-		if( error ) 
-			vips_g_error( &error ); 
-		else
-			vips_error( domain, 
-				"%s", _( "unable to create thread" ) );
-	}
-
-	return( thread );
-}
-
-void *
-vips_g_thread_join( GThread *thread )
-{
-	void *result;
-
-	result = g_thread_join( thread );
-
-	VIPS_DEBUG_MSG_RED( "vips_g_thread_join: g_thread_join( %p )\n", 
-		thread );
-
-	return( result ); 
-}
-
 typedef struct {
 	/* An name for this thread.
 	 */
@@ -430,6 +369,10 @@ vips_concurrency_set( int concurrency )
 	}
 
 	vips__concurrency = concurrency;
+
+	if( vips__exclusive )
+		g_thread_pool_set_max_threads( vips__pool,
+			vips__concurrency + vips__bg_threads, NULL );
 }
 
 /**
@@ -731,19 +674,6 @@ vips_task_free( VipsTask *task )
 	VIPS_FREE( task );
 }
 
-static void *
-vips__thread_once_init( void *data )
-{
-	/* We can have many more than vips__concurrency threads -- each active
-	 * pipeline will make vips__concurrency more, see
-	 * vips_threadpool_run().
-	 */
-	vips__pool = g_thread_pool_new( vips_thread_main_loop, NULL,
-		-1, FALSE, NULL );
-
-	return( NULL );
-}
-
 /**
  * vips__thread_execute:
  * @name: a name for the thread
@@ -760,14 +690,10 @@ vips__thread_once_init( void *data )
 int
 vips__thread_execute( const char *name, GFunc func, gpointer data )
 {
-	static GOnce once = G_ONCE_INIT;
-
 	VipsThreadExec *exec;
 	GError *error = NULL;
 	gboolean result;
 
-	VIPS_ONCE( &once, vips__thread_once_init, NULL );
-
 	exec = g_new( VipsThreadExec, 1 );
 	exec->name = name;
 	exec->func = func;
@@ -962,15 +888,15 @@ vips__threadpool_init( void )
 	if( g_getenv( "VIPS_STALL" ) )
 		vips__stall = TRUE;
 
+	if( g_getenv( "VIPS_SHARED_THREADPOOL" ) )
+		vips__exclusive = FALSE;
+
 	if( vips__concurrency == 0 )
 		vips__concurrency = vips__concurrency_get_default();
 
-	/* The threadpool is built in the first vips__thread_execute()
-	 * call, since we want thread creation to happen as late as possible.
-	 *
-	 * Many web platforms start up in a base environment, then fork() for
-	 * each request. We must not make the threadpool before the fork.
-	 */
+	vips__pool = g_thread_pool_new( vips_thread_main_loop, NULL,
+		vips__exclusive ? vips__concurrency + vips__bg_threads : -1,
+		vips__exclusive, NULL );
 
 	VIPS_DEBUG_MSG( "vips__threadpool_init: (%p)\n", vips__pool );
 }
